package kuchtastefan.actions.actionsWIthDuration.specificActionWithDuration;

import kuchtastefan.ability.Ability;
import kuchtastefan.actions.ActionEffectOn;
import kuchtastefan.actions.ActionName;
import kuchtastefan.actions.ActionStatusEffect;
import kuchtastefan.actions.actionsWIthDuration.ActionWithDuration;
import kuchtastefan.actions.actionsWIthDuration.actionMarkerInterface.ActionWithoutValue;
import kuchtastefan.character.GameCharacter;
import kuchtastefan.utility.ConsoleColor;

public class ActionInvulnerability extends ActionWithDuration implements ActionWithoutValue {
    public ActionInvulnerability(ActionName actionName, ActionEffectOn actionEffectOn, int baseActionValue,
                                 int maxActionTurns, int actionMaxStacks, int chanceToPerformAction,
                                 boolean canBeActionCriticalHit, ActionStatusEffect actionStatusEffect) {

        super(actionName, actionEffectOn, baseActionValue, maxActionTurns, actionMaxStacks,
                chanceToPerformAction, canBeActionCriticalHit, actionStatusEffect);
    }

    @Override
    public void performAction(GameCharacter gameCharacter) {
        gameCharacter.getEffectiveAbilities().put(Ability.RESIST_DAMAGE, 1000);
        System.out.println("\t" + gameCharacter.getName() + " have "
                + ConsoleColor.YELLOW + this.actionName + ConsoleColor.RESET
                + " for " + (this.getMaxActionTurns() - this.getCurrentActionTurn()) + " turns");
    }

    @Override
    public void printActionDescription(GameCharacter spellCaster, GameCharacter spellTarget) {
        System.out.print("Make " + this.returnTargetName(spellCaster, spellTarget)
                + " invulnerable. Block all incoming damage for next " + this.getMaxActionTurns() + " turns");
    }

    @Override
    public int returnPriorityPoints(GameCharacter spellCaster, GameCharacter spellTarget) {
        return 5;
    }
}
