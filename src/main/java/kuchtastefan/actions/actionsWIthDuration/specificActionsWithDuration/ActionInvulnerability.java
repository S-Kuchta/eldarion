package kuchtastefan.actions.actionsWIthDuration.specificActionsWithDuration;

import kuchtastefan.ability.Ability;
import kuchtastefan.actions.ActionEffectOn;
import kuchtastefan.actions.ActionName;
import kuchtastefan.actions.actionsWIthDuration.ActionDurationType;
import kuchtastefan.actions.actionsWIthDuration.ActionStatusEffect;
import kuchtastefan.actions.actionsWIthDuration.ActionWithDuration;
import kuchtastefan.character.GameCharacter;
import kuchtastefan.utility.ConsoleColor;

public class ActionInvulnerability extends ActionWithDuration {
    public ActionInvulnerability(ActionName actionName, ActionEffectOn actionEffectOn, int maxActionValue,
                                 int maxActionTurns, int actionMaxStacks, ActionDurationType actionDurationType,
                                 int chanceToPerformAction, boolean canBeActionCriticalHit, ActionStatusEffect actionStatusEffect) {
        super(actionName, actionEffectOn, maxActionValue, maxActionTurns, actionMaxStacks,
                actionDurationType, chanceToPerformAction, canBeActionCriticalHit, actionStatusEffect);
    }

    @Override
    public void performAction(GameCharacter gameCharacter) {
        gameCharacter.getCurrentAbilities().put(Ability.RESIST_DAMAGE, 1000);
        System.out.println("\t" + gameCharacter.getName() + " have "
                + ConsoleColor.YELLOW + this.actionName + ConsoleColor.RESET
                + " for " + (this.getMaxActionTurns() - this.getCurrentActionTurn()) + " turns");
    }
}
