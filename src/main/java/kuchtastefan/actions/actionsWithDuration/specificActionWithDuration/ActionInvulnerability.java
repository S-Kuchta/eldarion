package kuchtastefan.actions.actionsWithDuration.specificActionWithDuration;

import kuchtastefan.ability.Ability;
import kuchtastefan.actions.ActionEffectOn;
import kuchtastefan.actions.ActionName;
import kuchtastefan.actions.ActionStatusEffect;
import kuchtastefan.actions.actionValue.ActionWithoutValue;
import kuchtastefan.actions.actionsWithDuration.ActionWithDurationPerformedOnce;
import kuchtastefan.character.GameCharacter;
import kuchtastefan.utility.ConsoleColor;

public class ActionInvulnerability extends ActionWithDurationPerformedOnce implements ActionWithoutValue {

    public ActionInvulnerability(ActionName actionName, ActionEffectOn actionEffectOn, int maxActionValue, int maxActionTurns,
                                 int actionMaxStacks, int chanceToPerformAction, ActionStatusEffect actionStatusEffect) {
        super(actionName, actionEffectOn, maxActionValue, maxActionTurns, actionMaxStacks, chanceToPerformAction, actionStatusEffect);
    }

    @Override
    public void performAction() {
        this.charactersInvolvedInBattle.getSpellTarget().increaseEffectiveAbilityValue(1000, Ability.RESIST_DAMAGE);
    }

    @Override
    public void printActionPerforming() {
        System.out.println("\t" + charactersInvolvedInBattle.getSpellTarget().getName() + " have "
                + ConsoleColor.YELLOW + this.actionName + ConsoleColor.RESET
                + " for " + (this.getMaxActionTurns() - this.getCurrentActionTurn()) + " turns");
    }

    @Override
    public void printActionDescription(GameCharacter spellCaster, GameCharacter spellTarget) {
        System.out.print("Make " + this.returnTargetName(spellCaster, spellTarget)
                + " invulnerable. Block all incoming damage for next " + this.getMaxActionTurns() + " turns");
    }

    @Override
    public void printActiveAction() {
        System.out.print("Make " + this.charactersInvolvedInBattle.getSpellTarget().getName()
                + " invulnerable. Block all incoming damage for next " + this.getMaxActionTurns() + " turns");
    }

    @Override
    public int returnPriorityPoints(GameCharacter spellCaster, GameCharacter spellTarget) {
        return 5;
    }

    @Override
    public void returnToDefaultValues() {
        this.charactersInvolvedInBattle.getSpellTarget().decreaseEffectiveAbilityValue(1000, Ability.RESIST_DAMAGE);
    }
}
